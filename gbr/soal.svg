<svg width="323.528" height="204.019" xmlns="http://www.w3.org/2000/svg">
 <![CDATA[
/* inkweb.js - InkWebEffect:AutoUpdate */
/*
**  InkWeb - Inkscape's Javscript features for the open vector web
**
**  Copyright (C) 2009 Aurelio A. Heckert, aurium (a) gmail dot com
**
**  ********* Bugs and New Fetures *************************************
**   If you found any bug on this script or if you want to propose a
**   new feature, please report it in the inkscape bug tracker
**   https://bugs.launchpad.net/inkscape/+filebug
**   and assign that to Aurium.
**  ********************************************************************
**
**  This program is free software: you can redistribute it and/or modify
**  it under the terms of the GNU Lesser General Public License as published
**  by the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU Lesser General Public License for more details.
**
**  You should have received a copy of the GNU Lesser General Public License
**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var InkWeb = {

  version: 0.04,

  NS: {
    svg:      "http://www.w3.org/2000/svg",
    sodipodi: "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
    inkscape: "http://www.inkscape.org/namespaces/inkscape",
    cc:       "http://creativecommons.org/ns#",
    dc:       "http://purl.org/dc/elements/1.1/",
    rdf:      "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    xlink:    "http://www.w3.org/1999/xlink",
    xml:      "http://www.w3.org/XML/1998/namespace"
  }

};

InkWeb.el = function (tag, attributes) {
  // A helper to create SVG elements
  var element = document.createElementNS( this.NS.svg, tag );
  for ( var att in attributes ) {
    switch ( att ) {
      case "parent":
        attributes.parent.appendChild( element );
        break;
      case "text":
        element.appendChild( document.createTextNode( attributes.text ) );
        break;
      default:
        element.setAttribute( att, attributes[att] );
    }
  }
  return element;
}

InkWeb.reGetStyleAttVal = function (att) {
  return new RegExp( "(^|.*;)[ ]*"+ att +":([^;]*)(;.*|$)" )
}

InkWeb.getStyle = function (el, att) {
  // This method is needed because el.style is only working
  // to HTML style in the Firefox 3.0
  if ( typeof(el) == "string" )
    el = document.getElementById(el);
  var style = el.getAttribute("style");
  var match = this.reGetStyleAttVal(att).exec(style);
  if ( match ) {
    return match[2];
  } else {
    return false;
  }
}

InkWeb.setStyle = function (el, att, val) {
  if ( typeof(el) == "string" )
    el = document.getElementById(el);
  var style = el.getAttribute("style");
  re = this.reGetStyleAttVal(att);
  if ( re.test(style) ) {
    style = style.replace( re, "$1"+ att +":"+ val +"$3" );
  } else {
    style += ";"+ att +":"+ val;
  }
  el.setAttribute( "style", style );
  return val
}

InkWeb.transmitAtt = function (conf) {
  conf.att = conf.att.split( /\s+/ );
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to.join )
    conf.to = [ conf.to ];
  for ( var toEl,elN=0; toEl=conf.to[elN]; elN++ ) {
    if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
    for ( var i=0; i<conf.att.length; i++ ) {
      var val = this.getStyle( conf.from, conf.att[i] );
      if ( val ) {
        this.setStyle( toEl, conf.att[i], val );
      } else {
        val = conf.from.getAttribute(conf.att[i]);
        toEl.setAttribute( conf.att[i], val );
      }
    }
  }
}

InkWeb.goto = function (conf) {
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to )
    conf.to = conf.to ;
  if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
  toEl = document.getElementById( conf.to );
  document.getElementsByTagName("svg")[0].viewBox.baseVal.x = toEl.getAttribute("x");
  document.getElementsByTagName("svg")[0].viewBox.baseVal.y = toEl.getAttribute("y");
}

InkWeb.setAtt = function (conf) {
  if ( ! conf.el.join )
    conf.to = [ conf.el ];
  conf.att = conf.att.split( /\s+/ );
  conf.val = conf.val.split( /\s+/ );
  for ( var el,elN=0; el=conf.el[elN]; elN++ ) {
    if ( typeof(el) == "string" )
      el = document.getElementById( el );
    for ( var att,i=0; att=conf.att[i]; i++ ) {
      if (
           att == "width"  ||
           att == "height" ||
           att == "x"  ||
           att == "y"  ||
           att == "cx" ||
           att == "cy" ||
           att == "r"  ||
           att == "rx" ||
           att == "ry" ||
           att == "transform"
         ) {
        el.setAttribute( att, conf.val[i] );
      } else {
        this.setStyle( el, att, conf.val[i] );
      }
    }
  }
}

InkWeb.moveElTo = function (startConf) {
  if ( typeof(startConf) == "string" ) {
    // startConf may be only a element Id, to timeout recursive calls.
    var el = document.getElementById( startConf );
  } else {
    if ( typeof(startConf.el) == "string" )
      startConf.el = document.getElementById( startConf.el );
    var el = startConf.el;
  }
  if ( ! el.inkWebMoving ) {
    el.inkWebMoving = {
      step: 0
    };
  }
  var conf = el.inkWebMoving;
  if ( conf.step == 0 ) {
    conf.x = startConf.x;
    conf.y = startConf.y;
    // dur : duration of the animation in seconds
    if ( startConf.dur ) { conf.dur = startConf.dur }
    else { conf.dur = 1 }
    // steps : animation steps in a second
    if ( startConf.stepsBySec ) { conf.stepsBySec = startConf.stepsBySec }
    else { conf.stepsBySec = 16 }
    conf.sleep = Math.round( 1000 / conf.stepsBySec );
    conf.steps = conf.dur * conf.stepsBySec;
    var startPos = el.getBBox();
    conf.xInc = ( conf.x - startPos.x ) / conf.steps;
    conf.yInc = ( conf.y - startPos.y ) / conf.steps;
    conf.transform = el.transform.baseVal.consolidate();
    if ( ! conf.transform ) {
      conf.transform = el.ownerSVGElement.createSVGTransform();
    }
    el.transform.baseVal.clear();
    el.transform.baseVal.appendItem(conf.transform);
  }
  if ( conf.step < conf.steps ) {
    conf.step++;
    conf.transform.matrix.e += conf.xInc;
    conf.transform.matrix.f += conf.yInc;
    try{ el.ownerSVGElement.forceRedraw() }
    catch(e){ this.log(e, "this "+el.ownerSVGElement+" has no forceRedraw().") }
    conf.timeout = setTimeout( 'InkWeb.moveElTo("'+el.id+'")', conf.sleep );
  } else {
    delete el.inkWebMoving;
  }
}

InkWeb.moveViewbox = function (conf) {
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to )
    conf.to = conf.to ;
  if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
  toEl = document.getElementById( conf.to );
  document.getElementsByTagName("svg")[0].viewBox.baseVal.x = toEl.getAttribute("x");
  document.getElementsByTagName("svg")[0].viewBox.baseVal.y = toEl.getAttribute("y");
}

InkWeb.log = function () { /* if you need that, use the inkweb-debug.js too */ }
]]>
 <defs>
  <path d="m10,10l170,0l0,120l-170,0l0,-120z" id="a"/>
 </defs>
 <g>
  <title>background</title>
  <rect fill="none" id="canvas_background" height="602" width="802" y="-1" x="-1"/>
 </g>
 <g>
  <title>Layer 1</title>
  <rect fill="#0ff" fill-rule="evenodd" id="rect880" ry="10" rx="97.75" y="10" x="4" height="190" width="196"/>
  <text font-size="7.85841px" font-family="sans-serif" stroke-width="0.785841" id="text886" transform="scale(0.717199981212616,1.3942999839782715) " y="25.16" x="17.13" xml:space="preserve">
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan882" y="25.16" x="17.13">1.Suatu barisan aritmatika suku ke 5 nilainya 30</tspan>
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan884" y="34.983" x="17.13">dan suku ke 8 nilainya 36. Tentukan suku ke 2.</tspan>
  </text>
  <text font-size="7.85841px" font-family="sans-serif" stroke-width="0.785841" id="text892" transform="scale(0.717199981212616,1.3942999839782715) " y="49.947" x="17.13" xml:space="preserve">
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan888" y="49.947" x="17.13">2.Tentukan 5 suku pertama dari barisan aritmatika yang dimulai</tspan>
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan890" y="59.771" x="17.13">dari suku pertamanya 4 dan beda b nilainya 3.</tspan>
  </text>
  <text font-size="7.85841px" font-family="sans-serif" stroke-width="0.785841" id="text898" transform="scale(0.717199981212616,1.3942999839782715) " y="74.735" x="16.915" xml:space="preserve">
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan894" y="74.735" x="16.915">3.Tentukan 4 suku pertama dari barisan aritmatika yang</tspan>
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan896" y="84.558" x="16.915">memiliki pola n(n+1)</tspan>
  </text>
  <text font-size="7.85841px" font-family="sans-serif" stroke-width="0.785841" id="text904" transform="scale(0.717199981212616,1.3942999839782715) " y="99.522" x="17.242" xml:space="preserve">
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan900" y="99.522" x="17.242">4.Tentukan  suku ke 8 dari barisan aritmatika yang</tspan>
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan902" y="109.345" x="17.242">memiliki pola (2n-1)</tspan>
  </text>
  <text font-size="7.85841px" font-family="sans-serif" stroke-width="0.785841" id="text910" transform="scale(0.717199981212616,1.3942999839782715) " y="124.309" x="17.301" xml:space="preserve">
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan906" y="124.309" x="17.301">5.Tentukan  pola dari barisan aritmatika</tspan>
   <tspan font-size="7.44316px" stroke-width="0.785841" id="tspan908" y="134.132" x="17.301">yang 3 suku pertamanya : 2.3 , 3.4 , 4.5 , ...</tspan>
  </text>
  <text font-weight="700" font-size="24px" font-family="sans-serif" id="text914" y="200" x="12.567" xml:space="preserve"/>
  <ellipse fill="red" fill-rule="evenodd" ry="1.427" rx="0.714" cy="147.491" cx="217.192" id="path922"/>
  <ellipse fill="red" fill-rule="evenodd" ry="7.137" rx="8.564" cy="159.385" cx="228.373" id="path924"/>
  <ellipse fill="red" fill-rule="evenodd" ry="3.568" rx="3.093" cy="90.16" cx="256.681" id="path926"/>
  <path fill="#00f" fill-rule="evenodd" d="m229.324,26.168l23.313,0l0,25.216l-23.313,0l0,-25.216z" id="rect930"/>
  <path stroke="#000" id="svg_1" d="m-116.141918,140.234193l16.80662,0l5.193375,-21.77212l5.193378,21.77212l16.806617,0l-13.596816,13.455756l5.193644,21.77212l-13.596822,-13.456122l-13.596819,13.456122l5.193645,-21.77212l-13.596821,-13.455756z" fill="#fff"/>
 </g>
</svg>